# -*- coding: utf-8 -*-
"""StreamLit.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z0NmQedL93p60Eo5rTnS4bCqun0Yy86I
"""
import streamlit as st
from PIL import Image
import pandas as pd
from datetime import datetime
import pickle
import requests
import csv

# Define the filename for the user database CSV file
DB_FILENAME = "https://github.com/udaybhaskar717/Solar-Power-Forecasting-login/blob/main/User_Data.csv"

# Define the fields for the user database CSV file
DB_FIELDS = ["email", "password"]

# Define the maximum number of login attempts before the user is locked out
MAX_LOGIN_ATTEMPTS = 3

# Define the lockout duration (in seconds) for a user who exceeds the maximum number of login attempts
LOCKOUT_DURATION = 60

# Define a function to create the user database CSV file if it does not already exist
def create_user_database():
    with open(DB_FILENAME, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(DB_FIELDS)

# Define a function to add a new user to the user database CSV file
def add_user_to_database(email, password):
    with open(DB_FILENAME, "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([email, password])

# Define a function to retrieve a user's password from the user database CSV file
def get_password_from_database(email):
    with open(DB_FILENAME, "r") as f:
        reader = csv.DictReader(f, fieldnames=DB_FIELDS)
        for row in reader:
            if row["email"] == email:
                return row["password"]
        return None

# Define a function to authenticate a user's login credentials
def authenticate_user(email, password):
    user_password = get_password_from_database(email)
    if user_password is None:
        return False
    elif user_password == password:
        return True
    else:
        return False

# Define the URL of the .pkl file on GitHub
github_url = 'https://github.com/udaybhaskar717/Solar-Power-Forecasting-APP/raw/main/stack_reg_1.pkl'

# Retrieve the file contents using requests
response = requests.get(github_url)
file_contents = response.content

# Load the model object from the file contents using pickle
model = pickle.loads(file_contents)

# define a function to make predictions
def predict_solar_power(df):
    # make predictions using the loaded model
    predictions = model.predict(df)
    return predictions
def get_user_inputs():
    st.header("Enter the weather data:")
    date = st.date_input("Date", datetime.now().date())
    Ambient_temp = st.number_input("Ambient Temperature (°C)", value=25.0, key="ambient_temp")
    Module_temp = st.number_input("Module Temperature (°C)", value=25.0, key="module_temp")
    Irradiance = st.number_input("Irradiance (W/m^2)", value=1000.0, key="irradiance")
    # wind_speed = st.number_input("Wind Speed (m/s)", value=3.0, key="wind_speed")
    # pressure = st.number_input("Pressure (hPa)", value=1013.0, key="pressure")

    # create a DataFrame with the user inputs
    user_inputs = pd.DataFrame({
        'AMBIENT_TEMPERATURE': [Ambient_temp],
        'MODULE_TEMPERATURE': [Module_temp],
        'IRRADIATION': [Irradiance]
        # 'Wind Speed': [wind_speed],
        # 'Pressure': [pressure]
    })

    # add a new column with the date
    user_inputs['Date'] = pd.to_datetime(date)
    user_inputs.set_index('Date', inplace=True)

    return user_inputs
    def main():
        st.title("GIL Solar Power Forecasting Tool for Gandikota PV plant")
        # Set header image
        # load image from URL
        url = "https://raw.githubusercontent.com/udaybhaskar717/Solar-Power-Forecasting-APP/main/GIL_Image.png"
        image = Image.open(requests.get(url, stream=True).raw)
        # Create a container for the image
        img_container = st.container()
        # Add the image to the container
        with img_container:
            st.image(image, use_column_width=True)
            st.markdown(
               ''' <style>
                .stApp {
                    display: flex;
                    flex-direction: column;
                }
                .stApp > div:first-child {
                    margin-top: -30px;
                    margin-right: 10px;
                    align-self: center;
                    max-width: 100%;
                }
                </style>''', unsafe_allow_html=True)
        # Add a login form to the app
        st.sidebar.header("Login")
        email = st.sidebar.text_input("Email")
        password = st.sidebar.text_input("Password", type="password")
        if authenticate_user(email, password):
            st.sidebar.success("Logged in!")
            user_inputs = get_user_inputs()
            # Add a button to make the prediction
            if st.button("Predict"):
                # Make the prediction
                prediction = predict_solar_power(user_inputs)
                # Display the prediction
                st.success(f"The predicted solar power output is {round(prediction[0],2)} kW.")
        else:
            st.sidebar.error("Incorrect email or password.")

    if __name__ == "__main__":
        main()
